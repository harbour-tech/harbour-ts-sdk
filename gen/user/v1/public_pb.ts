// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file user/v1/public.proto (package user.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message user.v1.PingRequest
 */
export class PingRequest extends Message<PingRequest> {
  constructor(data?: PartialMessage<PingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.PingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): PingRequest {
    return new PingRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): PingRequest {
    return new PingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): PingRequest {
    return new PingRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: PingRequest | PlainMessage<PingRequest> | undefined,
    b: PingRequest | PlainMessage<PingRequest> | undefined
  ): boolean {
    return proto3.util.equals(PingRequest, a, b);
  }
}

/**
 * @generated from message user.v1.PingResponse
 */
export class PingResponse extends Message<PingResponse> {
  /**
   * @generated from field: string message = 10;
   */
  message = "";

  constructor(data?: PartialMessage<PingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.PingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): PingResponse {
    return new PingResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): PingResponse {
    return new PingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): PingResponse {
    return new PingResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: PingResponse | PlainMessage<PingResponse> | undefined,
    b: PingResponse | PlainMessage<PingResponse> | undefined
  ): boolean {
    return proto3.util.equals(PingResponse, a, b);
  }
}

/**
 * @generated from message user.v1.UserReadinessRequest
 */
export class UserReadinessRequest extends Message<UserReadinessRequest> {
  /**
   * @generated from field: string user_id = 10;
   */
  userId = "";

  constructor(data?: PartialMessage<UserReadinessRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.UserReadinessRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UserReadinessRequest {
    return new UserReadinessRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UserReadinessRequest {
    return new UserReadinessRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UserReadinessRequest {
    return new UserReadinessRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: UserReadinessRequest | PlainMessage<UserReadinessRequest> | undefined,
    b: UserReadinessRequest | PlainMessage<UserReadinessRequest> | undefined
  ): boolean {
    return proto3.util.equals(UserReadinessRequest, a, b);
  }
}

/**
 * We have no guarantee on which parts will be ready first, so it doesn't make any sense to have a linear progression.
 * There are three main components that need to be ready: crypto, banking, and a generic other.
 * In the future we might release new versions of this API that return more detailed steps.
 * Handlers for this API will keep showing any new steps in the "other_ready" boolean, to ensure backwards compatibility
 * with older apps which are unaware of any new steps.
 * The app could simply reason in terms of %, eg show a 33% progress when there's a single item true,
 * 66% when there's two and finally go through when all three are true.
 *
 * @generated from message user.v1.UserReadinessResponse
 */
export class UserReadinessResponse extends Message<UserReadinessResponse> {
  /**
   * @generated from field: bool crypto_ready = 10;
   */
  cryptoReady = false;

  /**
   * @generated from field: bool banking_ready = 20;
   */
  bankingReady = false;

  /**
   * @generated from field: bool other_ready = 30;
   */
  otherReady = false;

  constructor(data?: PartialMessage<UserReadinessResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.UserReadinessResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 10,
      name: "crypto_ready",
      kind: "scalar",
      T: 8 /* ScalarType.BOOL */,
    },
    {
      no: 20,
      name: "banking_ready",
      kind: "scalar",
      T: 8 /* ScalarType.BOOL */,
    },
    { no: 30, name: "other_ready", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UserReadinessResponse {
    return new UserReadinessResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UserReadinessResponse {
    return new UserReadinessResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UserReadinessResponse {
    return new UserReadinessResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: UserReadinessResponse | PlainMessage<UserReadinessResponse> | undefined,
    b: UserReadinessResponse | PlainMessage<UserReadinessResponse> | undefined
  ): boolean {
    return proto3.util.equals(UserReadinessResponse, a, b);
  }
}

/**
 * @generated from message user.v1.SetExchangeReadinessRequest
 */
export class SetExchangeReadinessRequest extends Message<SetExchangeReadinessRequest> {
  /**
   * @generated from field: string user_id = 10;
   */
  userId = "";

  constructor(data?: PartialMessage<SetExchangeReadinessRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.SetExchangeReadinessRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): SetExchangeReadinessRequest {
    return new SetExchangeReadinessRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): SetExchangeReadinessRequest {
    return new SetExchangeReadinessRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SetExchangeReadinessRequest {
    return new SetExchangeReadinessRequest().fromJsonString(
      jsonString,
      options
    );
  }

  static equals(
    a:
      | SetExchangeReadinessRequest
      | PlainMessage<SetExchangeReadinessRequest>
      | undefined,
    b:
      | SetExchangeReadinessRequest
      | PlainMessage<SetExchangeReadinessRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(SetExchangeReadinessRequest, a, b);
  }
}

/**
 * @generated from message user.v1.SetExchangeReadinessResponse
 */
export class SetExchangeReadinessResponse extends Message<SetExchangeReadinessResponse> {
  constructor(data?: PartialMessage<SetExchangeReadinessResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.SetExchangeReadinessResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): SetExchangeReadinessResponse {
    return new SetExchangeReadinessResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): SetExchangeReadinessResponse {
    return new SetExchangeReadinessResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SetExchangeReadinessResponse {
    return new SetExchangeReadinessResponse().fromJsonString(
      jsonString,
      options
    );
  }

  static equals(
    a:
      | SetExchangeReadinessResponse
      | PlainMessage<SetExchangeReadinessResponse>
      | undefined,
    b:
      | SetExchangeReadinessResponse
      | PlainMessage<SetExchangeReadinessResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(SetExchangeReadinessResponse, a, b);
  }
}

/**
 * @generated from message user.v1.PhoneNumber
 */
export class PhoneNumber extends Message<PhoneNumber> {
  /**
   * @generated from field: string prefix = 10;
   */
  prefix = "";

  /**
   * @generated from field: string number = 20;
   */
  number = "";

  constructor(data?: PartialMessage<PhoneNumber>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.PhoneNumber";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): PhoneNumber {
    return new PhoneNumber().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): PhoneNumber {
    return new PhoneNumber().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): PhoneNumber {
    return new PhoneNumber().fromJsonString(jsonString, options);
  }

  static equals(
    a: PhoneNumber | PlainMessage<PhoneNumber> | undefined,
    b: PhoneNumber | PlainMessage<PhoneNumber> | undefined
  ): boolean {
    return proto3.util.equals(PhoneNumber, a, b);
  }
}

/**
 * @generated from message user.v1.GetUserDetailsRequest
 */
export class GetUserDetailsRequest extends Message<GetUserDetailsRequest> {
  constructor(data?: PartialMessage<GetUserDetailsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.GetUserDetailsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetUserDetailsRequest {
    return new GetUserDetailsRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetUserDetailsRequest {
    return new GetUserDetailsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetUserDetailsRequest {
    return new GetUserDetailsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetUserDetailsRequest | PlainMessage<GetUserDetailsRequest> | undefined,
    b: GetUserDetailsRequest | PlainMessage<GetUserDetailsRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetUserDetailsRequest, a, b);
  }
}

/**
 * @generated from message user.v1.GetUserDetailsResponse
 */
export class GetUserDetailsResponse extends Message<GetUserDetailsResponse> {
  /**
   * @generated from field: string id = 10;
   */
  id = "";

  /**
   * @generated from field: string first_name = 20;
   */
  firstName = "";

  /**
   * @generated from field: string middle_names = 30;
   */
  middleNames = "";

  /**
   * @generated from field: string last_name = 40;
   */
  lastName = "";

  /**
   * @generated from field: user.v1.PhoneNumber phone_number = 50;
   */
  phoneNumber?: PhoneNumber;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 60;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: string email = 70;
   */
  email = "";

  /**
   * @generated from field: string date_of_birth = 80;
   */
  dateOfBirth = "";

  /**
   * @generated from field: user.v1.GetUserDetailsResponse.Address address = 90;
   */
  address?: GetUserDetailsResponse_Address;

  /**
   * If true, this is a test user and informs the client that any banking endpoint (such as pay out and exchange)
   * should use the dry-run flag, and cards should not allowed to be issued.
   * Changing phone number will be allowed from UI, but will have no effect on our db.
   *
   * @generated from field: bool is_test_user = 100;
   */
  isTestUser = false;

  /**
   * @generated from field: user.v1.Features features = 110;
   */
  features?: Features;

  constructor(data?: PartialMessage<GetUserDetailsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.GetUserDetailsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 20,
      name: "first_name",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 30,
      name: "middle_names",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    { no: 40, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 50, name: "phone_number", kind: "message", T: PhoneNumber },
    { no: 60, name: "created_at", kind: "message", T: Timestamp },
    { no: 70, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 80,
      name: "date_of_birth",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 90,
      name: "address",
      kind: "message",
      T: GetUserDetailsResponse_Address,
    },
    {
      no: 100,
      name: "is_test_user",
      kind: "scalar",
      T: 8 /* ScalarType.BOOL */,
    },
    { no: 110, name: "features", kind: "message", T: Features },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetUserDetailsResponse {
    return new GetUserDetailsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetUserDetailsResponse {
    return new GetUserDetailsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetUserDetailsResponse {
    return new GetUserDetailsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | GetUserDetailsResponse
      | PlainMessage<GetUserDetailsResponse>
      | undefined,
    b: GetUserDetailsResponse | PlainMessage<GetUserDetailsResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetUserDetailsResponse, a, b);
  }
}

/**
 * @generated from message user.v1.GetUserDetailsResponse.Address
 */
export class GetUserDetailsResponse_Address extends Message<GetUserDetailsResponse_Address> {
  /**
   * @generated from field: string address_line1 = 10;
   */
  addressLine1 = "";

  /**
   * @generated from field: string address_line2 = 20;
   */
  addressLine2 = "";

  /**
   * @generated from field: string city = 30;
   */
  city = "";

  /**
   * @generated from field: string state = 40;
   */
  state = "";

  /**
   * @generated from field: string post_code = 50;
   */
  postCode = "";

  /**
   * @generated from field: string country = 60;
   */
  country = "";

  constructor(data?: PartialMessage<GetUserDetailsResponse_Address>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.GetUserDetailsResponse.Address";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 10,
      name: "address_line1",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 20,
      name: "address_line2",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    { no: 30, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 50, name: "post_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 60, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetUserDetailsResponse_Address {
    return new GetUserDetailsResponse_Address().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetUserDetailsResponse_Address {
    return new GetUserDetailsResponse_Address().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetUserDetailsResponse_Address {
    return new GetUserDetailsResponse_Address().fromJsonString(
      jsonString,
      options
    );
  }

  static equals(
    a:
      | GetUserDetailsResponse_Address
      | PlainMessage<GetUserDetailsResponse_Address>
      | undefined,
    b:
      | GetUserDetailsResponse_Address
      | PlainMessage<GetUserDetailsResponse_Address>
      | undefined
  ): boolean {
    return proto3.util.equals(GetUserDetailsResponse_Address, a, b);
  }
}

/**
 * @generated from message user.v1.Features
 */
export class Features extends Message<Features> {
  /**
   * If absent, the user hasn't yet accepted the exchange risk.
   * If present, it means that they have accepted, and this timestamp is the moment in time they accepted.
   *
   * @generated from field: optional google.protobuf.Timestamp exchange_risk_acknowledgement = 120;
   */
  exchangeRiskAcknowledgement?: Timestamp;

  constructor(data?: PartialMessage<Features>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.Features";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 120,
      name: "exchange_risk_acknowledgement",
      kind: "message",
      T: Timestamp,
      opt: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Features {
    return new Features().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Features {
    return new Features().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Features {
    return new Features().fromJsonString(jsonString, options);
  }

  static equals(
    a: Features | PlainMessage<Features> | undefined,
    b: Features | PlainMessage<Features> | undefined
  ): boolean {
    return proto3.util.equals(Features, a, b);
  }
}
