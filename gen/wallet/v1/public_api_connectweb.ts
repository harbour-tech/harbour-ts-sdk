// @generated by protoc-gen-connect-web v0.9.1 with parameter "target=ts"
// @generated from file wallet/v1/public_api.proto (package wallet.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import {
  CreateCryptoAccountRequest,
  CreateCryptoAccountResponse,
  GetBankAccountRequest,
  GetBankAccountResponse,
  GetBankAccountsRequest,
  GetBankAccountsResponse,
  GetBankTransactionEventsRequest,
  GetBankTransactionEventsResponse,
  GetBankTransactionsRequest,
  GetBankTransactionsResponse,
  GetBankTransactionTimelineRequest,
  GetBankTransactionTimelineResponse,
  GetCryptoAccountRequest,
  GetCryptoAccountResponse,
  GetCryptoAccountsRequest,
  GetCryptoAccountsResponse,
  GetCryptoTransactionEventsRequest,
  GetCryptoTransactionEventsResponse,
  GetCryptoTransactionTimelineRequest,
  GetCryptoTransactionTimelineResponse,
  PingRequest,
  PingResponse,
} from "./public_api_pb";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service wallet.v1.PingService
 */
export const PingService = {
  typeName: "wallet.v1.PingService",
  methods: {
    /**
     * @generated from rpc wallet.v1.PingService.Ping
     */
    ping: {
      name: "Ping",
      I: PingRequest,
      O: PingResponse,
      kind: MethodKind.Unary,
    },
  },
} as const;

/**
 * @generated from service wallet.v1.WalletService
 */
export const WalletService = {
  typeName: "wallet.v1.WalletService",
  methods: {
    /**
     * Get all bank accounts to which a user has access.
     * Returns an empty list if user has no accounts (such as before identity check), does not check user existence.
     * Returns a PERMISSION_DENIED code if the user_id param does not match the authenticated user
     *
     * @generated from rpc wallet.v1.WalletService.GetBankAccounts
     */
    getBankAccounts: {
      name: "GetBankAccounts",
      I: GetBankAccountsRequest,
      O: GetBankAccountsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get a bank account by ID to which a user has access.
     * Returns a not found error code in case user has no such account with provided ID, does not check user existence.
     * Returns a PERMISSION_DENIED code if the user_id param does not match the authenticated user
     *
     * @generated from rpc wallet.v1.WalletService.GetBankAccount
     */
    getBankAccount: {
      name: "GetBankAccount",
      I: GetBankAccountRequest,
      O: GetBankAccountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get all crypto accounts to which a user has access.
     * Returns an empty list if user has no balances, does not check user existence.
     * Keep in mind that a balance is an entity, so there's a difference between not having a crypto balance and having a zero balance.
     * Crypto balances need to be initialised before users can interact with the respective blockchain, which is why
     * for certain crypto currencies there might be a missing (non-initialised) balance.
     * Returns an UNAUTHENTICATED code if the user_id param does not match the authenticated user
     *
     * @generated from rpc wallet.v1.WalletService.GetCryptoAccounts
     */
    getCryptoAccounts: {
      name: "GetCryptoAccounts",
      I: GetCryptoAccountsRequest,
      O: GetCryptoAccountsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get a crypto account by ID to which a user has access.
     * Returns a not found error in case user has no such account, does not check user existence.
     * Returns an UNAUTHENTICATED code if the user_id param does not match the authenticated user
     *
     * @generated from rpc wallet.v1.WalletService.GetCryptoAccount
     */
    getCryptoAccount: {
      name: "GetCryptoAccount",
      I: GetCryptoAccountRequest,
      O: GetCryptoAccountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates a new crypto wallet for the user, and returns it.
     *
     * @generated from rpc wallet.v1.WalletService.CreateCryptoAccount
     */
    createCryptoAccount: {
      name: "CreateCryptoAccount",
      I: CreateCryptoAccountRequest,
      O: CreateCryptoAccountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get all crypto transactions across all wallets a user has access to.
     * Returns a PERMISSION_DENIED code if the authenticated user has no access to the specified account,
     * or if the authenticated user does not match the user id.
     * This returns a timeline of crypto transactions from the most recent to the oldest.
     * Use case: infinite scroll in a UI from most recent crypto transactions in reverse order until some point in the past.
     *
     * @generated from rpc wallet.v1.WalletService.GetCryptoTransactionTimeline
     */
    getCryptoTransactionTimeline: {
      name: "GetCryptoTransactionTimeline",
      I: GetCryptoTransactionTimelineRequest,
      O: GetCryptoTransactionTimelineResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get all bank transactions across all accounts a user has access to.
     * Returns a PERMISSION_DENIED code if the authenticated user has no access to the specified account,
     * or if the authenticated user does not match the user id.
     * This returns a timeline of bank transactions from the most recent to the oldest.
     * Use case: infinite scroll in a UI from most recent transactions in reverse order until some point in the past.
     *
     * @generated from rpc wallet.v1.WalletService.GetBankTransactionTimeline
     */
    getBankTransactionTimeline: {
      name: "GetBankTransactionTimeline",
      I: GetBankTransactionTimelineRequest,
      O: GetBankTransactionTimelineResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get all bank transactions across all or a specific account a user has access to.
     * Returns a PERMISSION_DENIED code if the authenticated user has no access to the specified account,
     * or if the authenticated user does not match the user id.
     * This returns bank transactions from the most recent to the oldest, results can be filtered using from/to params.
     * Use case: openbanking service needs to be able to fetch all transactions for a given account.
     * WARNING: if you use from/to and you dont provide microsecond precision, you might get duplicate records.
     *
     * @generated from rpc wallet.v1.WalletService.GetBankTransactions
     */
    getBankTransactions: {
      name: "GetBankTransactions",
      I: GetBankTransactionsRequest,
      O: GetBankTransactionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get all crypto transaction events that happened on all wallets a user has access to.
     * Returns a PERMISSION_DENIED code if the authenticated user has no access to the specified account,
     * or if the authenticated user does not match the user id.
     * Events are returned from oldest to most recent, since a given anchor event.
     * Use case: synchronize a client with all new crypto events since the last one it received, or since the most recent timeline entry.
     *
     * @generated from rpc wallet.v1.WalletService.GetCryptoTransactionEvents
     */
    getCryptoTransactionEvents: {
      name: "GetCryptoTransactionEvents",
      I: GetCryptoTransactionEventsRequest,
      O: GetCryptoTransactionEventsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get all bank transaction events that happened on all accounts a user has access to.
     * Returns a PERMISSION_DENIED code if the authenticated user has no access to the specified account,
     * or if the authenticated user does not match the user id.
     * Events are returned from oldest to most recent, since a given anchor event.
     * Use case: synchronize a client with all new bank account events since the last one it received, or since the most recent timeline entry.
     *
     * @generated from rpc wallet.v1.WalletService.GetBankTransactionEvents
     */
    getBankTransactionEvents: {
      name: "GetBankTransactionEvents",
      I: GetBankTransactionEventsRequest,
      O: GetBankTransactionEventsResponse,
      kind: MethodKind.Unary,
    },
  },
} as const;
