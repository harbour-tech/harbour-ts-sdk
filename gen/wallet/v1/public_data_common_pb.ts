// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file wallet/v1/public_data_common.proto (package wallet.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message wallet.v1.Balance
 */
export class Balance extends Message<Balance> {
  /**
   * @generated from field: string cleared = 10;
   */
  cleared = "";

  /**
   * The available balance equals the cleared balance minus any pending debits
   * (eg: a withdrawal waiting to be signed, or an authorised card transactions that's pending clearance)
   *
   * @generated from field: string available = 20;
   */
  available = "";

  /**
   * @generated from field: int64 incremental_id = 30;
   */
  incrementalId = protoInt64.zero;

  constructor(data?: PartialMessage<Balance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wallet.v1.Balance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "cleared", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "available", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 30,
      name: "incremental_id",
      kind: "scalar",
      T: 3 /* ScalarType.INT64 */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Balance {
    return new Balance().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Balance {
    return new Balance().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Balance {
    return new Balance().fromJsonString(jsonString, options);
  }

  static equals(
    a: Balance | PlainMessage<Balance> | undefined,
    b: Balance | PlainMessage<Balance> | undefined
  ): boolean {
    return proto3.util.equals(Balance, a, b);
  }
}

/**
 * @generated from message wallet.v1.TransactionTime
 */
export class TransactionTime extends Message<TransactionTime> {
  /**
   * Date/Time at which the transaction was submitted
   * (eg: time of card authorisation at POS, time of submitting a bank payment or requesting a crypto tx)
   *
   * @generated from field: google.protobuf.Timestamp posted_time = 10;
   */
  postedTime?: Timestamp;

  /**
   * Date/Time at which the transaction was last updated (typically state changes).
   * Use this to avoid overriding transactions in rare cases where events might be received out of order.
   *
   * @generated from field: google.protobuf.Timestamp updated_time = 20;
   */
  updatedTime?: Timestamp;

  /**
   * Date/Time at which the transaction reached its final state (cleared, rejected, failed).
   *
   * @generated from field: google.protobuf.Timestamp finalised_time = 30;
   */
  finalisedTime?: Timestamp;

  constructor(data?: PartialMessage<TransactionTime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wallet.v1.TransactionTime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "posted_time", kind: "message", T: Timestamp },
    { no: 20, name: "updated_time", kind: "message", T: Timestamp },
    { no: 30, name: "finalised_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TransactionTime {
    return new TransactionTime().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TransactionTime {
    return new TransactionTime().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TransactionTime {
    return new TransactionTime().fromJsonString(jsonString, options);
  }

  static equals(
    a: TransactionTime | PlainMessage<TransactionTime> | undefined,
    b: TransactionTime | PlainMessage<TransactionTime> | undefined
  ): boolean {
    return proto3.util.equals(TransactionTime, a, b);
  }
}

/**
 * @generated from message wallet.v1.Amount
 */
export class Amount extends Message<Amount> {
  /**
   * @generated from field: string amount = 1;
   */
  amount = "";

  /**
   * either ISO currency code or cryptocyrrency Ticker (eg: EUR or BTC)
   *
   * @generated from field: string currency = 2;
   */
  currency = "";

  constructor(data?: PartialMessage<Amount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wallet.v1.Amount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Amount {
    return new Amount().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Amount {
    return new Amount().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Amount {
    return new Amount().fromJsonString(jsonString, options);
  }

  static equals(
    a: Amount | PlainMessage<Amount> | undefined,
    b: Amount | PlainMessage<Amount> | undefined
  ): boolean {
    return proto3.util.equals(Amount, a, b);
  }
}

/**
 * Most of the time, you'll see something like LocalAmount: 20 EUR, CardAmount: 20 EUR, SpendAmountTotal: 20 EUR, SpendAmountNet: 20 EUR, SpendAmountFee: 0 EUR
 * However, amounts might differ when spending abroad, and even when converting other balances as source of funds.
 * As an example, let's assume we pay at a New York restaurant with a EUR card, using our USDC balance.
 * Let's say the restaurante bills 12 USD, Visa bills the card 11.05 EUR, and we take 12.10 USDC from the customer's USDC
 * account, as it's set as a funding source for the card.
 *
 * @generated from message wallet.v1.CardTransactionDetails
 */
export class CardTransactionDetails extends Message<CardTransactionDetails> {
  /**
   * This is always the amount that was paid locally at the POS or ATM.
   * So it might be any currency in the world that VISA (or MasterCard) supports.
   * In our example it's 12 USD.
   *
   * @generated from field: wallet.v1.Amount local_amount = 10;
   */
  localAmount?: Amount;

  /**
   * fx rate between the local and the card amount. It's effectively the rate given to us by the payments processor.
   * Note: the fx rate will be 1 when the local currency == card currency.
   * Eg: if the card is GBP, and the local currency is EUR, the fx rate will represent the EUR/GBP rate.
   *
   * @generated from field: string local_fx_rate = 11;
   */
  localFxRate = "";

  /**
   * This is the amount that was charged on the card.
   * In our example 11.05 EUR because it's a EUR card.
   *
   * @generated from field: wallet.v1.Amount card_amount = 20;
   */
  cardAmount?: Amount;

  /**
   * This is what is billed to the account from which funds are taken to fund the card transaction.
   * In our example it's 12.10 USDC.
   * Other example: if we are using a GBP account to fund a EUR card, this would be GBP.
   * In any case, this is the amount that affects the balance of the account to which it belongs.
   *
   * @generated from field: wallet.v1.Amount spend_amount_total = 30;
   */
  spendAmountTotal?: Amount;

  /**
   * At the moment we do not charge fees on top of the exchange rate, so the net is always the same as the total,
   * and the fee is always zero. However, in the future, this might change.
   * In our example, the net is 12 and the fee 0.10 USDC.
   * The spend amount total, net and fee are always the same currency as the account this transaction belongs to.
   *
   * @generated from field: wallet.v1.Amount spend_amount_net = 31;
   */
  spendAmountNet?: Amount;

  /**
   * @generated from field: wallet.v1.Amount spend_amount_fee = 32;
   */
  spendAmountFee?: Amount;

  /**
   * fx rate between the card and the spend amount. This is Harbour's fx rate, offered to the customer,
   * in order to fund their card transaction with an account of a different currency.
   * Note: the fx rate will be 1 when the account currency is same with card currency.
   * Eg: if the card is GBP, and a USDC account was used to fund it, the fx rate will represent the GBP/USDC rate.
   *
   * @generated from field: string spend_fx_rate = 33;
   */
  spendFxRate = "";

  /**
   * @generated from field: wallet.v1.CardTransactionDetails.Merchant merchant = 40;
   */
  merchant?: CardTransactionDetails_Merchant;

  /**
   * The internal card id of the card that was used to make the transaction.
   *
   * @generated from field: string card_id = 60;
   */
  cardId = "";

  constructor(data?: PartialMessage<CardTransactionDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wallet.v1.CardTransactionDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "local_amount", kind: "message", T: Amount },
    {
      no: 11,
      name: "local_fx_rate",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    { no: 20, name: "card_amount", kind: "message", T: Amount },
    { no: 30, name: "spend_amount_total", kind: "message", T: Amount },
    { no: 31, name: "spend_amount_net", kind: "message", T: Amount },
    { no: 32, name: "spend_amount_fee", kind: "message", T: Amount },
    {
      no: 33,
      name: "spend_fx_rate",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 40,
      name: "merchant",
      kind: "message",
      T: CardTransactionDetails_Merchant,
    },
    { no: 60, name: "card_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CardTransactionDetails {
    return new CardTransactionDetails().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CardTransactionDetails {
    return new CardTransactionDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CardTransactionDetails {
    return new CardTransactionDetails().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | CardTransactionDetails
      | PlainMessage<CardTransactionDetails>
      | undefined,
    b: CardTransactionDetails | PlainMessage<CardTransactionDetails> | undefined
  ): boolean {
    return proto3.util.equals(CardTransactionDetails, a, b);
  }
}

/**
 * @generated from message wallet.v1.CardTransactionDetails.Merchant
 */
export class CardTransactionDetails_Merchant extends Message<CardTransactionDetails_Merchant> {
  /**
   * @generated from field: string id = 10;
   */
  id = "";

  /**
   * @generated from field: string mcc = 20;
   */
  mcc = "";

  /**
   * @generated from field: string name = 30;
   */
  name = "";

  constructor(data?: PartialMessage<CardTransactionDetails_Merchant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wallet.v1.CardTransactionDetails.Merchant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "mcc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CardTransactionDetails_Merchant {
    return new CardTransactionDetails_Merchant().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CardTransactionDetails_Merchant {
    return new CardTransactionDetails_Merchant().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CardTransactionDetails_Merchant {
    return new CardTransactionDetails_Merchant().fromJsonString(
      jsonString,
      options
    );
  }

  static equals(
    a:
      | CardTransactionDetails_Merchant
      | PlainMessage<CardTransactionDetails_Merchant>
      | undefined,
    b:
      | CardTransactionDetails_Merchant
      | PlainMessage<CardTransactionDetails_Merchant>
      | undefined
  ): boolean {
    return proto3.util.equals(CardTransactionDetails_Merchant, a, b);
  }
}
