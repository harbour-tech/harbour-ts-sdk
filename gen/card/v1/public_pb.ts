// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file card/v1/public.proto (package card.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum card.v1.CardType
 */
export enum CardType {
  /**
   * @generated from enum value: CARD_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CARD_TYPE_VIRTUAL = 1;
   */
  VIRTUAL = 1,

  /**
   * @generated from enum value: CARD_TYPE_PHYSICAL = 2;
   */
  PHYSICAL = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(CardType)
proto3.util.setEnumType(CardType, "card.v1.CardType", [
  { no: 0, name: "CARD_TYPE_UNSPECIFIED" },
  { no: 1, name: "CARD_TYPE_VIRTUAL" },
  { no: 2, name: "CARD_TYPE_PHYSICAL" },
]);

/**
 * @generated from enum card.v1.CardStatus
 */
export enum CardStatus {
  /**
   * @generated from enum value: CARD_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * not relevant until we get physical cards, which need to be activated
   *
   * @generated from enum value: CARD_STATUS_PENDING_ACTIVATION = 10;
   */
  PENDING_ACTIVATION = 10,

  /**
   * @generated from enum value: CARD_STATUS_ACTIVE = 20;
   */
  ACTIVE = 20,

  /**
   * @generated from enum value: CARD_STATUS_BLOCKED = 30;
   */
  BLOCKED = 30,
}
// Retrieve enum metadata with: proto3.getEnumType(CardStatus)
proto3.util.setEnumType(CardStatus, "card.v1.CardStatus", [
  { no: 0, name: "CARD_STATUS_UNSPECIFIED" },
  { no: 10, name: "CARD_STATUS_PENDING_ACTIVATION" },
  { no: 20, name: "CARD_STATUS_ACTIVE" },
  { no: 30, name: "CARD_STATUS_BLOCKED" },
]);

/**
 * @generated from enum card.v1.KBAType
 */
export enum KBAType {
  /**
   * @generated from enum value: KBA_TYPE_UNSPECIFIED = 0;
   */
  KBA_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: KBA_TYPE_MAIDEN_NAME = 1;
   */
  KBA_TYPE_MAIDEN_NAME = 1,

  /**
   * @generated from enum value: KBA_TYPE_CHILDHOOD_FRIEND = 2;
   */
  KBA_TYPE_CHILDHOOD_FRIEND = 2,

  /**
   * @generated from enum value: KBA_TYPE_FIRST_CAR = 3;
   */
  KBA_TYPE_FIRST_CAR = 3,

  /**
   * @generated from enum value: KBA_TYPE_CITY_WHERE_PARENTS_MET = 4;
   */
  KBA_TYPE_CITY_WHERE_PARENTS_MET = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(KBAType)
proto3.util.setEnumType(KBAType, "card.v1.KBAType", [
  { no: 0, name: "KBA_TYPE_UNSPECIFIED" },
  { no: 1, name: "KBA_TYPE_MAIDEN_NAME" },
  { no: 2, name: "KBA_TYPE_CHILDHOOD_FRIEND" },
  { no: 3, name: "KBA_TYPE_FIRST_CAR" },
  { no: 4, name: "KBA_TYPE_CITY_WHERE_PARENTS_MET" },
]);

/**
 * @generated from message card.v1.PingRequest
 */
export class PingRequest extends Message<PingRequest> {
  constructor(data?: PartialMessage<PingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.v1.PingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): PingRequest {
    return new PingRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): PingRequest {
    return new PingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): PingRequest {
    return new PingRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: PingRequest | PlainMessage<PingRequest> | undefined,
    b: PingRequest | PlainMessage<PingRequest> | undefined
  ): boolean {
    return proto3.util.equals(PingRequest, a, b);
  }
}

/**
 * @generated from message card.v1.PingResponse
 */
export class PingResponse extends Message<PingResponse> {
  /**
   * @generated from field: string message = 10;
   */
  message = "";

  constructor(data?: PartialMessage<PingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.v1.PingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): PingResponse {
    return new PingResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): PingResponse {
    return new PingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): PingResponse {
    return new PingResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: PingResponse | PlainMessage<PingResponse> | undefined,
    b: PingResponse | PlainMessage<PingResponse> | undefined
  ): boolean {
    return proto3.util.equals(PingResponse, a, b);
  }
}

/**
 * @generated from message card.v1.GetSecureTokenRequest
 */
export class GetSecureTokenRequest extends Message<GetSecureTokenRequest> {
  /**
   * @generated from field: string card_id = 10;
   */
  cardId = "";

  /**
   * @generated from field: string user_id = 20;
   */
  userId = "";

  constructor(data?: PartialMessage<GetSecureTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.v1.GetSecureTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "card_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetSecureTokenRequest {
    return new GetSecureTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetSecureTokenRequest {
    return new GetSecureTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetSecureTokenRequest {
    return new GetSecureTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetSecureTokenRequest | PlainMessage<GetSecureTokenRequest> | undefined,
    b: GetSecureTokenRequest | PlainMessage<GetSecureTokenRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetSecureTokenRequest, a, b);
  }
}

/**
 * @generated from message card.v1.GetSecureTokenResponse
 */
export class GetSecureTokenResponse extends Message<GetSecureTokenResponse> {
  /**
   * @generated from oneof card.v1.GetSecureTokenResponse.result
   */
  result:
    | {
        /**
         * @generated from field: card.v1.GetSecureTokenResponse.Error error = 10;
         */
        value: GetSecureTokenResponse_Error;
        case: "error";
      }
    | {
        /**
         * @generated from field: card.v1.GetSecureTokenResponse.TokenInfo token_info = 20;
         */
        value: GetSecureTokenResponse_TokenInfo;
        case: "tokenInfo";
      }
    | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GetSecureTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.v1.GetSecureTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 10,
      name: "error",
      kind: "enum",
      T: proto3.getEnumType(GetSecureTokenResponse_Error),
      oneof: "result",
    },
    {
      no: 20,
      name: "token_info",
      kind: "message",
      T: GetSecureTokenResponse_TokenInfo,
      oneof: "result",
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetSecureTokenResponse {
    return new GetSecureTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetSecureTokenResponse {
    return new GetSecureTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetSecureTokenResponse {
    return new GetSecureTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | GetSecureTokenResponse
      | PlainMessage<GetSecureTokenResponse>
      | undefined,
    b: GetSecureTokenResponse | PlainMessage<GetSecureTokenResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetSecureTokenResponse, a, b);
  }
}

/**
 * note: this RPC should not be invoked on expired or blocked cards, else an error is returned
 *
 * @generated from enum card.v1.GetSecureTokenResponse.Error
 */
export enum GetSecureTokenResponse_Error {
  /**
   * @generated from enum value: ERROR_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ERROR_CARD_IS_BLOCKED = 10;
   */
  CARD_IS_BLOCKED = 10,

  /**
   * @generated from enum value: ERROR_CARD_IS_EXPIRED = 20;
   */
  CARD_IS_EXPIRED = 20,
}
// Retrieve enum metadata with: proto3.getEnumType(GetSecureTokenResponse_Error)
proto3.util.setEnumType(
  GetSecureTokenResponse_Error,
  "card.v1.GetSecureTokenResponse.Error",
  [
    { no: 0, name: "ERROR_UNSPECIFIED" },
    { no: 10, name: "ERROR_CARD_IS_BLOCKED" },
    { no: 20, name: "ERROR_CARD_IS_EXPIRED" },
  ]
);

/**
 * @generated from message card.v1.GetSecureTokenResponse.TokenInfo
 */
export class GetSecureTokenResponse_TokenInfo extends Message<GetSecureTokenResponse_TokenInfo> {
  /**
   * Encrypted token, needs to be decrypted with RSA OAP, empty label, with the device's private key
   * Then it can be used as an Authorization Bearer token here:
   * https://modulr.readme.io/reference/getsecurecarddetails
   *
   * @generated from field: string secure_token = 10;
   */
  secureToken = "";

  constructor(data?: PartialMessage<GetSecureTokenResponse_TokenInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.v1.GetSecureTokenResponse.TokenInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 10,
      name: "secure_token",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetSecureTokenResponse_TokenInfo {
    return new GetSecureTokenResponse_TokenInfo().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetSecureTokenResponse_TokenInfo {
    return new GetSecureTokenResponse_TokenInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetSecureTokenResponse_TokenInfo {
    return new GetSecureTokenResponse_TokenInfo().fromJsonString(
      jsonString,
      options
    );
  }

  static equals(
    a:
      | GetSecureTokenResponse_TokenInfo
      | PlainMessage<GetSecureTokenResponse_TokenInfo>
      | undefined,
    b:
      | GetSecureTokenResponse_TokenInfo
      | PlainMessage<GetSecureTokenResponse_TokenInfo>
      | undefined
  ): boolean {
    return proto3.util.equals(GetSecureTokenResponse_TokenInfo, a, b);
  }
}

/**
 * @generated from message card.v1.GetCardsRequest
 */
export class GetCardsRequest extends Message<GetCardsRequest> {
  /**
   * @generated from field: string user_id = 10;
   */
  userId = "";

  constructor(data?: PartialMessage<GetCardsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.v1.GetCardsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetCardsRequest {
    return new GetCardsRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetCardsRequest {
    return new GetCardsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetCardsRequest {
    return new GetCardsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetCardsRequest | PlainMessage<GetCardsRequest> | undefined,
    b: GetCardsRequest | PlainMessage<GetCardsRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetCardsRequest, a, b);
  }
}

/**
 * @generated from message card.v1.GetCardsResponse
 */
export class GetCardsResponse extends Message<GetCardsResponse> {
  /**
   * only one for now
   *
   * @generated from field: repeated card.v1.Card cards = 10;
   */
  cards: Card[] = [];

  constructor(data?: PartialMessage<GetCardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.v1.GetCardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "cards", kind: "message", T: Card, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetCardsResponse {
    return new GetCardsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetCardsResponse {
    return new GetCardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetCardsResponse {
    return new GetCardsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetCardsResponse | PlainMessage<GetCardsResponse> | undefined,
    b: GetCardsResponse | PlainMessage<GetCardsResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetCardsResponse, a, b);
  }
}

/**
 * @generated from message card.v1.CreateVirtualCardRequest
 */
export class CreateVirtualCardRequest extends Message<CreateVirtualCardRequest> {
  /**
   * @generated from field: string user_id = 10;
   */
  userId = "";

  /**
   * As part of 3D-secure authentication, the user will have to respond to a security question, in addition to an OTP.
   * At least one element is required, and no more than 3 are allowed. Duplicate types will be ignored.
   *
   * @generated from field: repeated card.v1.KBA authentication_answers = 20;
   */
  authenticationAnswers: KBA[] = [];

  constructor(data?: PartialMessage<CreateVirtualCardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.v1.CreateVirtualCardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 20,
      name: "authentication_answers",
      kind: "message",
      T: KBA,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateVirtualCardRequest {
    return new CreateVirtualCardRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateVirtualCardRequest {
    return new CreateVirtualCardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateVirtualCardRequest {
    return new CreateVirtualCardRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | CreateVirtualCardRequest
      | PlainMessage<CreateVirtualCardRequest>
      | undefined,
    b:
      | CreateVirtualCardRequest
      | PlainMessage<CreateVirtualCardRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(CreateVirtualCardRequest, a, b);
  }
}

/**
 * @generated from message card.v1.CreateVirtualCardResponse
 */
export class CreateVirtualCardResponse extends Message<CreateVirtualCardResponse> {
  /**
   * There are no scenarios in which the request can fail, apart from client errors
   * (such as a missing field - for which a code Invalid Argument is returned)
   *
   * @generated from field: card.v1.Card card = 10;
   */
  card?: Card;

  constructor(data?: PartialMessage<CreateVirtualCardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.v1.CreateVirtualCardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "card", kind: "message", T: Card },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateVirtualCardResponse {
    return new CreateVirtualCardResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateVirtualCardResponse {
    return new CreateVirtualCardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateVirtualCardResponse {
    return new CreateVirtualCardResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | CreateVirtualCardResponse
      | PlainMessage<CreateVirtualCardResponse>
      | undefined,
    b:
      | CreateVirtualCardResponse
      | PlainMessage<CreateVirtualCardResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(CreateVirtualCardResponse, a, b);
  }
}

/**
 * @generated from message card.v1.BlockCardRequest
 */
export class BlockCardRequest extends Message<BlockCardRequest> {
  /**
   * Required, the card id to block.
   *
   * @generated from field: string card_id = 10;
   */
  cardId = "";

  /**
   * @generated from field: string user_id = 20;
   */
  userId = "";

  constructor(data?: PartialMessage<BlockCardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.v1.BlockCardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "card_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): BlockCardRequest {
    return new BlockCardRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): BlockCardRequest {
    return new BlockCardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): BlockCardRequest {
    return new BlockCardRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: BlockCardRequest | PlainMessage<BlockCardRequest> | undefined,
    b: BlockCardRequest | PlainMessage<BlockCardRequest> | undefined
  ): boolean {
    return proto3.util.equals(BlockCardRequest, a, b);
  }
}

/**
 * @generated from message card.v1.BlockCardResponse
 */
export class BlockCardResponse extends Message<BlockCardResponse> {
  /**
   * the card id that was blocked.
   *
   * @generated from field: string card_id = 10;
   */
  cardId = "";

  constructor(data?: PartialMessage<BlockCardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.v1.BlockCardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "card_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): BlockCardResponse {
    return new BlockCardResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): BlockCardResponse {
    return new BlockCardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): BlockCardResponse {
    return new BlockCardResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: BlockCardResponse | PlainMessage<BlockCardResponse> | undefined,
    b: BlockCardResponse | PlainMessage<BlockCardResponse> | undefined
  ): boolean {
    return proto3.util.equals(BlockCardResponse, a, b);
  }
}

/**
 * @generated from message card.v1.UnblockCardRequest
 */
export class UnblockCardRequest extends Message<UnblockCardRequest> {
  /**
   * Required, the card id to unblock.
   *
   * @generated from field: string card_id = 10;
   */
  cardId = "";

  /**
   * @generated from field: string user_id = 20;
   */
  userId = "";

  constructor(data?: PartialMessage<UnblockCardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.v1.UnblockCardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "card_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UnblockCardRequest {
    return new UnblockCardRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UnblockCardRequest {
    return new UnblockCardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UnblockCardRequest {
    return new UnblockCardRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: UnblockCardRequest | PlainMessage<UnblockCardRequest> | undefined,
    b: UnblockCardRequest | PlainMessage<UnblockCardRequest> | undefined
  ): boolean {
    return proto3.util.equals(UnblockCardRequest, a, b);
  }
}

/**
 * @generated from message card.v1.UnblockCardResponse
 */
export class UnblockCardResponse extends Message<UnblockCardResponse> {
  /**
   * the card id that was unblocked.
   *
   * @generated from field: string card_id = 10;
   */
  cardId = "";

  constructor(data?: PartialMessage<UnblockCardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.v1.UnblockCardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "card_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UnblockCardResponse {
    return new UnblockCardResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UnblockCardResponse {
    return new UnblockCardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UnblockCardResponse {
    return new UnblockCardResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: UnblockCardResponse | PlainMessage<UnblockCardResponse> | undefined,
    b: UnblockCardResponse | PlainMessage<UnblockCardResponse> | undefined
  ): boolean {
    return proto3.util.equals(UnblockCardResponse, a, b);
  }
}

/**
 * @generated from message card.v1.SwitchCardSourceRequest
 */
export class SwitchCardSourceRequest extends Message<SwitchCardSourceRequest> {
  /**
   * the card should be in active status and should not be expired. If not, an error is returned.
   *
   * @generated from field: string card_id = 10;
   */
  cardId = "";

  /**
   * @generated from field: string user_id = 20;
   */
  userId = "";

  /**
   * @generated from field: card.v1.SourceOfFunds switch_to = 30;
   */
  switchTo?: SourceOfFunds;

  constructor(data?: PartialMessage<SwitchCardSourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.v1.SwitchCardSourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "card_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "switch_to", kind: "message", T: SourceOfFunds },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): SwitchCardSourceRequest {
    return new SwitchCardSourceRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): SwitchCardSourceRequest {
    return new SwitchCardSourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SwitchCardSourceRequest {
    return new SwitchCardSourceRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | SwitchCardSourceRequest
      | PlainMessage<SwitchCardSourceRequest>
      | undefined,
    b:
      | SwitchCardSourceRequest
      | PlainMessage<SwitchCardSourceRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(SwitchCardSourceRequest, a, b);
  }
}

/**
 * @generated from message card.v1.SwitchCardSourceResponse
 */
export class SwitchCardSourceResponse extends Message<SwitchCardSourceResponse> {
  /**
   * the card id that was switched.
   *
   * @generated from field: string card_id = 10;
   */
  cardId = "";

  /**
   * @generated from field: card.v1.SourceOfFunds result = 20;
   */
  result?: SourceOfFunds;

  constructor(data?: PartialMessage<SwitchCardSourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.v1.SwitchCardSourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "card_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "result", kind: "message", T: SourceOfFunds },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): SwitchCardSourceResponse {
    return new SwitchCardSourceResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): SwitchCardSourceResponse {
    return new SwitchCardSourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SwitchCardSourceResponse {
    return new SwitchCardSourceResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | SwitchCardSourceResponse
      | PlainMessage<SwitchCardSourceResponse>
      | undefined,
    b:
      | SwitchCardSourceResponse
      | PlainMessage<SwitchCardSourceResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(SwitchCardSourceResponse, a, b);
  }
}

/**
 * @generated from message card.v1.Card
 */
export class Card extends Message<Card> {
  /**
   * @generated from field: string id = 10;
   */
  id = "";

  /**
   * @generated from field: string user_id = 20;
   */
  userId = "";

  /**
   * @generated from field: card.v1.CardType card_type = 30;
   */
  cardType = CardType.UNSPECIFIED;

  /**
   * 16 digits, with asterisks for the hidden ones
   *
   * @generated from field: string masked_card_number = 40;
   */
  maskedCardNumber = "";

  /**
   * ISO 8601 date (yyyy-MM) when the card expires. Eg: 2024-12.
   * The month is intended to be inclusive. Eg: 2024-12 means the card is valid until 2024-12-31 23:59:59.
   * Although the exact time of expiry is unknown as our provider does not specify the expiry timezone.
   * Supposedly either UTC or British time.
   *
   * @generated from field: string expiry = 60;
   */
  expiry = "";

  /**
   * @generated from field: card.v1.CardStatus status = 70;
   */
  status = CardStatus.UNSPECIFIED;

  /**
   * @generated from field: card.v1.SourceOfFunds source_of_funds = 80;
   */
  sourceOfFunds?: SourceOfFunds;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 100;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<Card>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.v1.Card";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 30,
      name: "card_type",
      kind: "enum",
      T: proto3.getEnumType(CardType),
    },
    {
      no: 40,
      name: "masked_card_number",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    { no: 60, name: "expiry", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 70, name: "status", kind: "enum", T: proto3.getEnumType(CardStatus) },
    { no: 80, name: "source_of_funds", kind: "message", T: SourceOfFunds },
    { no: 100, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Card {
    return new Card().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Card {
    return new Card().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Card {
    return new Card().fromJsonString(jsonString, options);
  }

  static equals(
    a: Card | PlainMessage<Card> | undefined,
    b: Card | PlainMessage<Card> | undefined
  ): boolean {
    return proto3.util.equals(Card, a, b);
  }
}

/**
 * @generated from message card.v1.SourceOfFunds
 */
export class SourceOfFunds extends Message<SourceOfFunds> {
  /**
   * @generated from field: string asset_id = 10;
   */
  assetId = "";

  /**
   * @generated from field: card.v1.SourceOfFunds.Type type = 20;
   */
  type = SourceOfFunds_Type.UNSPECIFIED;

  /**
   * @generated from field: string account_id = 30;
   */
  accountId = "";

  constructor(data?: PartialMessage<SourceOfFunds>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.v1.SourceOfFunds";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 20,
      name: "type",
      kind: "enum",
      T: proto3.getEnumType(SourceOfFunds_Type),
    },
    {
      no: 30,
      name: "account_id",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): SourceOfFunds {
    return new SourceOfFunds().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): SourceOfFunds {
    return new SourceOfFunds().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SourceOfFunds {
    return new SourceOfFunds().fromJsonString(jsonString, options);
  }

  static equals(
    a: SourceOfFunds | PlainMessage<SourceOfFunds> | undefined,
    b: SourceOfFunds | PlainMessage<SourceOfFunds> | undefined
  ): boolean {
    return proto3.util.equals(SourceOfFunds, a, b);
  }
}

/**
 * @generated from enum card.v1.SourceOfFunds.Type
 */
export enum SourceOfFunds_Type {
  /**
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TYPE_FIAT = 1;
   */
  FIAT = 1,

  /**
   * @generated from enum value: TYPE_CRYPTO = 2;
   */
  CRYPTO = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(SourceOfFunds_Type)
proto3.util.setEnumType(SourceOfFunds_Type, "card.v1.SourceOfFunds.Type", [
  { no: 0, name: "TYPE_UNSPECIFIED" },
  { no: 1, name: "TYPE_FIAT" },
  { no: 2, name: "TYPE_CRYPTO" },
]);

/**
 * Knowledge-based answer
 *
 * @generated from message card.v1.KBA
 */
export class KBA extends Message<KBA> {
  /**
   * @generated from field: card.v1.KBAType answer_type = 1;
   */
  answerType = KBAType.KBA_TYPE_UNSPECIFIED;

  /**
   * max 45 characters
   *
   * @generated from field: string answer = 2;
   */
  answer = "";

  constructor(data?: PartialMessage<KBA>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.v1.KBA";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "answer_type",
      kind: "enum",
      T: proto3.getEnumType(KBAType),
    },
    { no: 2, name: "answer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): KBA {
    return new KBA().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): KBA {
    return new KBA().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): KBA {
    return new KBA().fromJsonString(jsonString, options);
  }

  static equals(
    a: KBA | PlainMessage<KBA> | undefined,
    b: KBA | PlainMessage<KBA> | undefined
  ): boolean {
    return proto3.util.equals(KBA, a, b);
  }
}

/**
 * @generated from message card.v1.GetCardExternalIDRequest
 */
export class GetCardExternalIDRequest extends Message<GetCardExternalIDRequest> {
  /**
   * @generated from field: string card_id = 10;
   */
  cardId = "";

  /**
   * @generated from field: string user_id = 20;
   */
  userId = "";

  constructor(data?: PartialMessage<GetCardExternalIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.v1.GetCardExternalIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "card_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetCardExternalIDRequest {
    return new GetCardExternalIDRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetCardExternalIDRequest {
    return new GetCardExternalIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetCardExternalIDRequest {
    return new GetCardExternalIDRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | GetCardExternalIDRequest
      | PlainMessage<GetCardExternalIDRequest>
      | undefined,
    b:
      | GetCardExternalIDRequest
      | PlainMessage<GetCardExternalIDRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(GetCardExternalIDRequest, a, b);
  }
}

/**
 * @generated from message card.v1.GetCardExternalIDResponse
 */
export class GetCardExternalIDResponse extends Message<GetCardExternalIDResponse> {
  /**
   * @generated from field: string external_id = 10;
   */
  externalId = "";

  constructor(data?: PartialMessage<GetCardExternalIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.v1.GetCardExternalIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 10,
      name: "external_id",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetCardExternalIDResponse {
    return new GetCardExternalIDResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetCardExternalIDResponse {
    return new GetCardExternalIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetCardExternalIDResponse {
    return new GetCardExternalIDResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | GetCardExternalIDResponse
      | PlainMessage<GetCardExternalIDResponse>
      | undefined,
    b:
      | GetCardExternalIDResponse
      | PlainMessage<GetCardExternalIDResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(GetCardExternalIDResponse, a, b);
  }
}
