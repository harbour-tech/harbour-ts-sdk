// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file auth/v1/common.proto (package auth.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message auth.v1.PhoneNumber
 */
export class PhoneNumber extends Message<PhoneNumber> {
  /**
   * Phone prefix, both formats are supported (either +44 or 0044), mandatory.
   * Submitting an invalid prefix will produce an invalid_argument error response.
   *
   * @generated from field: string prefix = 10;
   */
  prefix = "";

  /**
   * Mandatory phone number, will be validated on the server side.
   * Only digits allowed, please strip away any spaces or parentheses before submitting. Max length: 30.
   * Send a number starting with 111 or 222 in non-prod environments to send an OTP via Slack instead of SMS.
   * Use 111 or 777 in scenarios where the OTP needs to be known beforehand, such as acceptance tests.
   * Note that valid UK mobile numbers need to start with +447 and be 10 digits long excluding the country prefix.
   * The OTP will not be generated randomly, but instead will consist of the last 6 digits of the phone number.
   * Use 222 to generate a random OTP.
   * Eg: +44 7908 538983 -> an SMS is sent to this real UK phone number
   *     +44 111 123456 -> an OTP 123456 is sent to Slack
   *     +44 222 123456 -> a random OTP is sent to Slack
   *
   * @generated from field: string number = 20;
   */
  number = "";

  constructor(data?: PartialMessage<PhoneNumber>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.PhoneNumber";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): PhoneNumber {
    return new PhoneNumber().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): PhoneNumber {
    return new PhoneNumber().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): PhoneNumber {
    return new PhoneNumber().fromJsonString(jsonString, options);
  }

  static equals(
    a: PhoneNumber | PlainMessage<PhoneNumber> | undefined,
    b: PhoneNumber | PlainMessage<PhoneNumber> | undefined
  ): boolean {
    return proto3.util.equals(PhoneNumber, a, b);
  }
}
