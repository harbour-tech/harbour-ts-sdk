// @generated by protoc-gen-connect-web v0.9.1 with parameter "target=ts"
// @generated from file crypto_payment/v1/public.proto (package crypto_payment.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import {
  AddToWhitelistConfirmRequest,
  AddToWhitelistConfirmResponse,
  AddToWhitelistRequest,
  AddToWhitelistResponse,
  EstimateWithdrawalFeeRequest,
  EstimateWithdrawalFeeResponse,
  GetWhitelistRequest,
  GetWhitelistResponse,
  PingRequest,
  PingResponse,
  WithdrawAssetRequest,
  WithdrawAssetResponse,
} from "./public_pb";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service crypto_payment.v1.PingService
 */
export const PingService = {
  typeName: "crypto_payment.v1.PingService",
  methods: {
    /**
     * @generated from rpc crypto_payment.v1.PingService.Ping
     */
    ping: {
      name: "Ping",
      I: PingRequest,
      O: PingResponse,
      kind: MethodKind.Unary,
    },
  },
} as const;

/**
 * @generated from service crypto_payment.v1.WhitelistService
 */
export const WhitelistService = {
  typeName: "crypto_payment.v1.WhitelistService",
  methods: {
    /**
     * GetWhitelist - returns the whitelist for the asset identification specified in the request.
     * This endpoint requires the user ID in the auth principal propagated in the context.
     *
     * @generated from rpc crypto_payment.v1.WhitelistService.GetWhitelist
     */
    getWhitelist: {
      name: "GetWhitelist",
      I: GetWhitelistRequest,
      O: GetWhitelistResponse,
      kind: MethodKind.Unary,
    },
    /**
     * adding to whitelist consist of the two steps - first we request "add to whitelist" endpoint,
     * which returns the token and initiate the OTP sending to the user.
     * Next step - we call the confirmation endpoint (AddToWhitelistConfirm) and send the otp value
     * along with the token to confirm adding to whitelist
     *
     * @generated from rpc crypto_payment.v1.WhitelistService.AddToWhitelist
     */
    addToWhitelist: {
      name: "AddToWhitelist",
      I: AddToWhitelistRequest,
      O: AddToWhitelistResponse,
      kind: MethodKind.Unary,
    },
    /**
     * call this endpoint after AddToWhitelist and send the otp along with the token returned from previous call
     *
     * @generated from rpc crypto_payment.v1.WhitelistService.AddToWhitelistConfirm
     */
    addToWhitelistConfirm: {
      name: "AddToWhitelistConfirm",
      I: AddToWhitelistConfirmRequest,
      O: AddToWhitelistConfirmResponse,
      kind: MethodKind.Unary,
    },
  },
} as const;

/**
 * @generated from service crypto_payment.v1.PaymentService
 */
export const PaymentService = {
  typeName: "crypto_payment.v1.PaymentService",
  methods: {
    /**
     * To be able to withdraw asset we need to have the address added to the whitelist. So before withdrawing -
     * the client needs to go through the process of adding the address to the whitelist.
     * Then we need to provide the whitelist id, asset, source wallet, destination address.
     *
     *
     * @generated from rpc crypto_payment.v1.PaymentService.WithdrawAsset
     */
    withdrawAsset: {
      name: "WithdrawAsset",
      I: WithdrawAssetRequest,
      O: WithdrawAssetResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc crypto_payment.v1.PaymentService.EstimateWithdrawalFee
     */
    estimateWithdrawalFee: {
      name: "EstimateWithdrawalFee",
      I: EstimateWithdrawalFeeRequest,
      O: EstimateWithdrawalFeeResponse,
      kind: MethodKind.Unary,
    },
  },
} as const;
