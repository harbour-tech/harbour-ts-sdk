syntax = "proto3";

package wallet.v1;

import "google/protobuf/empty.proto";

message BankPaymentDetails {
  BankPaymentRoute route = 10;

  oneof scheme {
    // Only one is populated, depending on BankPaymentRoute.
    // Empty is used for payments that didn't go through any route (BANK_PAYMENT_ROUTE_UNSPECIFIED)
    google.protobuf.Empty empty_scheme = 15;
    DomesticUkPaymentScheme domestic_uk_scheme = 20;
    SepaPaymentScheme sepa_scheme = 30;
    SwiftPaymentScheme swift_scheme = 40;
  }

  // Most of the times, the counterparty name is available.
  // Do perform truncation, as this can be up to 200 chars long.
  string counterparty_name = 50;

  // When sending/receiving money from/to UK acc-num / sort code, the UkAccountIdentifier is populated
  // When sending/receiving money from/to SEPA or SWIFT-enabled international accounts, IBANAccountIdentifier is populated
  // The counterparty is the beneficiary (payee) for any payments out, and the sender (payer) for any payments in.
  // Note that the counterparty details may not always be available, so treat them as optional (empty will be returned).
  // Also note that the counterparty details might be available even when route is BANK_PAYMENT_ROUTE_UNSPECIFIED.
  // For example, when paying to another Harbour customer, there is no route, however we know the other person's
  // account details, which will be shown here.
  oneof counterparty {
    google.protobuf.Empty empty_counterparty = 90;
    UkAccountIdentifier counterparty_uk = 100;
    IBANAccountIdentifier counterparty_iban = 101;
  }
}

enum BankPaymentRoute {
  // Unspecified for payments that didn't go through any route, as they were internal to Harbour
  // For example, a transfer between two users, a currency exchange, a fee or a balance adjustment.
  BANK_PAYMENT_ROUTE_UNSPECIFIED = 0;
  BANK_PAYMENT_ROUTE_UK_DOMESTIC = 10;
  BANK_PAYMENT_ROUTE_SEPA = 20;
  BANK_PAYMENT_ROUTE_SWIFT = 30;
}

// Used for GBP payments within the UK
enum DomesticUkPaymentScheme {
  DOMESTIC_UK_PAYMENT_SCHEME_UNSPECIFIED = 0;

  // Bankers' Automated Clearing Services
  // https://www.bacs.co.uk/
  // Old way of doing bank payments, still used as underlying technology for Direct Debits
  // Takes days to clear
  DOMESTIC_UK_PAYMENT_SCHEME_BACS = 10;

  // Clearing House Automated Payment System
  // https://www.bankofengland.co.uk/payment-and-settlement/chaps
  // Typically used for large sums (> 1M)
  DOMESTIC_UK_PAYMENT_SCHEME_CHAPS = 20;

  // Faster Payments Scheme
  // Most common form of payment in the UK up to 1M GBP
  // Latency: although it can be instant, it is guaranteed to reach destination within a few hours
  // https://www.wearepay.uk/what-we-do/payment-systems/faster-payment-system/
  DOMESTIC_UK_PAYMENT_SCHEME_FPS = 30;
}

// SEPA - Single Euro Payments Area
// Used for EUR payments in Europe
enum SepaPaymentScheme {
  SEPA_PAYMENT_SCHEME_UNSPECIFIED = 0;

  // SEPA Credit Transfer - if performed before a given cutoff time during the day, will reach destination the following day
  // Excluding weekends.
  SEPA_PAYMENT_SCHEME_SCT = 10;

  // SEPA Instant Credit Transfer - at most 20s
  SEPA_PAYMENT_SCHEME_ICT = 20;
}

// SWIFT - Society for Worldwide Interbank Financial Telecommunication
// Used for international bank payments.
// As of today, all SWIFT payments use a single scheme, so there's no need to specify one.
enum SwiftPaymentScheme {
  SWIFT_PAYMENT_SCHEME_UNSPECIFIED = 0;
}

message UkAccountIdentifier {
  string account_number = 1; // eg: 12345678
  string sort_code = 2; // eg: 11-22-33
}

message IBANAccountIdentifier {
  string iban = 1; // eg GB24BKEN10000031510604
  string bic = 2; // either 8 or 11 character BIC/SWIFT code, eg: BEASCN12345
}

enum BankTransactionType {
  BANK_TRANSACTION_TYPE_UNSPECIFIED = 0;

  // Any kind of card transaction, including some merchants verifying that the card is active.
  // Could be 0 amount for these kind of verifications.
  // Amount is negative for any card debits, positive for refunds.
  // Note: a pending card transaction could be fully, or partially refunded, in which case it will reach the
  // final state with a smaller debit, or even zero.
  // However, once a transaction reaches its final state, a refund will typically involve a new transaction.
  // In this scenario, the old transaction will exist with as a debit and the new one as a credit.
  BANK_TRANSACTION_TYPE_CARD = 10;

  // Any kind of bank payment: domestic, international, open-banking.
  // Negative when initiated by account holder, positive when receiving money.
  // Same refund rules apply as for cards: once a payment is cleared, refunds will appear as a new transaction
  // with a positive amount. Refunds might happen in case the payment cannot reach the recipient, or in some rare
  // cases if our bank decides to not clear it because of potential fraud.
  BANK_TRANSACTION_TYPE_PAYMENT = 20;

  // Either UK or SEPA direct debit, or other country-specific direct debits if we ever support them.
  BANK_TRANSACTION_TYPE_DIRECT_DEBIT = 30;

  // ATM transaction: either withdrawal or enquiry (such as changing pin or checking balance).
  // Unless it's a withdrawal, it should be a zero amount, however we might decide to include a fee for
  // certain enquiries so the amount would be negative.
  // Should never be negative, apart from exceptional scenarios where the transaction is refunded.
  BANK_TRANSACTION_TYPE_ATM = 40;

  // We haven't decided yet if fees are embedded in transactions or appear as separate ones.
  // Any fee that appears as a separate transaction will be of this type.
  // We might potentially use this for monthly subscription fees too.
  BANK_TRANSACTION_TYPE_FEE = 50;

  // Cash deposits, either via ATM or partners. Not supported at the moment.
  BANK_TRANSACTION_TYPE_CASH = 60;

  // Direct transfer from one Harbor account to the other.
  // Potentially between accounts of the same user, or different users.
  BANK_TRANSACTION_TYPE_TRANSFER = 70;

  // The account was debited or credited as part of a currency conversion.
  // Might be either fiat/fiat or crypto/fiat.
  BANK_TRANSACTION_TYPE_FX = 80;

  BANK_TRANSACTION_TYPE_ADJUSTMENT = 90;

  // Other kind of transaction. Two examples of when this could happen:
  // Our staff amends a ledger manually because of an error or any other internal operation.
  // A new type has being added and older RPC versions are adapted to convert to this type,
  // whereas new RPC versions will expose the correct type.
  // This helps avoid breaking outdated client apps.
  BANK_TRANSACTION_TYPE_OTHER = 1000;
}

enum BankTransactionState {
  BANK_TRANSACTION_STATE_UNSPECIFIED = 0;

  // Only happens for payments initiated by the client.
  // State is initialised as soon as it is submitted, but might be later rejected for many reasons
  // (insufficient funds, compliance, fraud, velocity limits).
  // Probably best not to show on customer UI until it transitions to PENDING
  BANK_TRANSACTION_STATE_INITIALISED = 10;

  // This is a payment that passed initial validation and is now pending to be processed,
  // or a card transaction that was authorised, but it can take an additional couple of days
  // to reach a final settlement with Visa/Mastercard)
  BANK_TRANSACTION_STATE_PENDING = 20;

  // A payment or card transaction reached their final state and should not be altered anymore,
  // except for quite exceptional cases. Client should still allow CLEARED transactions to be overwritten,
  // to account for these rare events. This final state also implies success.
  BANK_TRANSACTION_STATE_CLEARED = 30;

  // A payment or card spend or ATM enquiry was rejected. Also a final state.
  // Again, should never be altered once rejected, but do allow overwrites just in case.
  BANK_TRANSACTION_STATE_REJECTED = 40;

  // A transaction failed for technical reasons rather than being rejected. Also a final state.
  // Again, should never be altered once rejected, but do allow overwrites just in case.
  BANK_TRANSACTION_STATE_FAILED = 50;

  // A card authorisation was cancelled. This is a final state.
  // This happens when a card authorisation is fully reversed.
  BANK_TRANSACTION_STATE_CANCELLED = 60;

  // A card transaction was declined by the merchant. This is a final state.
  BANK_TRANSACTION_STATE_DECLINED = 70;
}

enum BankTransactionFailReason {
  BANK_TRANSACTION_FAIL_REASON_UNSPECIFIED = 0;

  BANK_TRANSACTION_FAIL_REASON_INSUFFICIENT_BALANCE = 10;

  // Failed due to limits on account. Example: max balance, max daily or monthly withdrawals.
  BANK_TRANSACTION_FAIL_REASON_LIMITS = 20;

  // Failed because of screening. Example: suspicious transaction, potential fraud.
  BANK_TRANSACTION_FAIL_REASON_SCREENING = 30;

  // Eg: wrong PIN at POS, or wrong CVV at online merchant.
  // Hopefully we are able to get a more detailed error (see following), but not all card processors support it,
  // so we might fall back to this one.
  BANK_TRANSACTION_FAIL_REASON_INVALID_CARD_DETAILS = 40;

  // Wrong PIN at POS/ATM
  BANK_TRANSACTION_FAIL_REASON_WRONG_CARD_PIN = 50;

  // Wrong CVV when paying online
  BANK_TRANSACTION_FAIL_REASON_WRONG_CARD_CVV = 60;

  // Wrong expiry date paying online
  BANK_TRANSACTION_FAIL_REASON_WRONG_CARD_EXPIRY_DATE = 70;

  // Failed 3D-secure challenge while paying online
  BANK_TRANSACTION_FAIL_REASON_FAILED_3DS = 80;

  // Card expired
  BANK_TRANSACTION_FAIL_REASON_CARD_EXPIRED = 90;

  // Card got deactivated by user
  BANK_TRANSACTION_FAIL_REASON_CARD_INACTIVE = 100;

  // An outbound payment was returned
  BANK_TRANSACTION_FAIL_REASON_PAYMENT_RETURNED= 110;

  // An unexpected error happened and our backend wasn't able to process this tx
  BANK_TRANSACTION_FAIL_REASON_SERVER_ERROR = 500;

  // If we add new elements to this enum, handlers should convert them to this type to avoid breaking clients
  BANK_TRANSACTION_FAIL_REASON_UNKNOWN = 1000;
}