syntax = "proto3";

package ramp.v1;

import "google/protobuf/timestamp.proto";

service PingService {
  rpc Ping (PingRequest) returns (PingResponse) {}
}

message PingRequest {
}

message PingResponse {
  string message = 10;
}

// All the RPCs in this service require the authentication headers, except the ones for estimating fees.
service RampService {
  // Returns account information. If result in the response is of type authentication then user should be
  // authenticated (onboarded or logged in). Authentication URL is provided in the result.
  rpc GetAccountInfo (GetAccountInfoRequest) returns (GetAccountInfoResponse) {}

  // Whitelists address. Crypto assets can only be on-ramped to address which belongs to the user.
  // In order to proof address belongs to the user, address need to be signed with private key of this address.
  rpc WhitelistAddress (WhitelistAddressRequest) returns (WhitelistAddressResponse) {}

  //  Removes whitelisted address
  rpc RemoveAddress (RemoveAddressRequest) returns (RemoveAddressResponse) {}

  // Sets a bank account for the off ramp
  rpc SetBankAccount (SetBankAccountRequest) returns (SetBankAccountResponse) {}

  rpc GetRamps(GetRampsRequest) returns (GetRampsResponse) {}

  rpc RegisterReferralTransaction(RegisterReferralTransactionRequest) returns (RegisterReferralTransactionResponse) {}

  // Authentication headers are not required for these RPCs.
  rpc EstimateOnRampFee (EstimateOnRampFeeRequest) returns (EstimateOnRampFeeResponse) {}
  rpc EstimateOffRampFee (EstimateOffRampFeeRequest) returns (EstimateOffRampFeeResponse) {}
  rpc GetAssets(GetAssetsRequest) returns (GetAssetsResponse) {}
}

message GetAccountInfoRequest {
  optional string referral_code = 10;
}

message GetAccountInfoResponse {
  oneof result {
    // when result is authentication user needs to be onboarded or logged in
    Authentication authentication = 20;
    // when result is account user is logged
    Account account = 30;
  }

  message Authentication {
    // authentication_url should be loaded in the i-frame or browser window in order to log in or onboard user
    string authentication_url = 10;
    // token expiry in seconds, the frontend is expected to close the onboarding view (but the user can come back any time)
    // don't worry about the time skew from api latency, there's a grace period on top of this expiry
    int64 expires_in_sec = 20;
  }

  message Account {
    // list of whitelisted addresses. On-ramping could be done only to whitelisted address
    repeated Wallet wallets = 10;

    // A bank account created by Harbour in the name of the user, where funds can be sent
    oneof onramp_bank_account {
      ScanCoordinates onramp_scan = 100; // only for scheme SCAN (UK payments)
      IbanCoordinates onramp_iban = 110; // for both SEPA and SWIFT schemes
    }

    // A bank account set by the user for off-ramping, see rpc SetBankAccount
    oneof offramp_bank_account {
      ScanCoordinates offramp_scan = 200; // only for scheme SCAN (UK payments)
      IbanCoordinates offramp_iban = 210; // for both SEPA and SWIFT schemes
    }

    string account_holder = 20; // account holder name for on and off-ramping

    // list of supported assets
    repeated CryptoAsset crypto_assets = 30;

    AccountLimits limits = 40;

    // Field is optional as it depends on downstream microservices. In case of error
    // fetching points, we want this API to keep working. If this ends up being null,
    // the client should show something like N/A or 'error fetching points' to the 
    // user, but not 0 points, to avoid alarming them.
    optional Reward reward = 50;

    message Reward{
      // the amount of reward points the user has earned
      int64 points = 10;

      // referral code the user can use to refer others and earn more points
      string referral_code = 20;
    }
  }

  // Deprecated
  message CryptoAsset {
    // asset status for on/off ramping
    RampStatus status = 1;

    Protocol protocol = 5;
    Network network = 10;
    AssetId asset_id = 20; // the client can use this to match an asset with precision and display custom wording / icon, e.g. "USDC"
    string short_name = 30; // to be used as a fallback if the client doesn't recognise the asset_id (eg: out of date proto definitions)
    string symbol = 35; // the canonical symbol for the asset - eg: USDC for any Circle-issued USDC on any chain, or ETH for Ethereum

    oneof details {
      EthereumErc20Token ethereum_erc20_token = 40;
      CosmosIcs20Token cosmos_ics20_token = 50;
      SubstratePsp22Token substrate_psp22_token = 60;
      EthereumNative ethereum_native = 70;
    }

    message EthereumErc20Token {
      string token_address = 10; // ERC20 token address
    }
    message CosmosIcs20Token {
      string ibc_address = 10; // IBC token address
    }
    message SubstratePsp22Token {
      string token_address = 10; // Substrate PSP22 token address
    }
    message EthereumNative {}
    message RampStatus {
      Status onramp = 10;
      Status offramp = 20;
  
      enum Status {
        // All is good, asset can be on/off ramped
        STATUS_UNSPECIFIED = 0;
        // Our system is experiencing degradation (longer waits) but still operational.
        // The UI should warn users.
        STATUS_DEGRADED = 20;
        // Exceptional scenarios: ramping halted. The UI should prevent users from taking any action.
        STATUS_HALTED = 30;
      }
    }
  }

  message Wallet {
    string name = 5; // user given name, less then 100 symbols
    Protocol protocol = 10;
    string address = 20; // address of a wallet in blockchain
    repeated RampAsset assets = 30; // assets available for on- and off- ramping

    message RampAsset {
      CryptoAsset asset = 10;
      OnRamp on_ramp = 20;
      OffRamp off_ramp = 30;
    }

    message OnRamp {
      string payment_reference = 10; // e.g. "ETU1"
    }

    message OffRamp {
      string address = 10; // address, crypto asset should be send to for offramping
    }
  }

  message AccountLimits {
    // limit for single on-ramp in fiat currency
    string onramp_single_limit = 10;
    // daily limit for on-ramp in fiat currency
    string onramp_daily_limit = 20;
    // current usage for on-ramp in fiat currency
    string onramp_current_daily_usage = 30;

    // single limit for off-ramp expressed in fiat currency (either EUR or GBP)
    string offramp_single_limit = 40;
    // daily limit for off-ramp expressed in fiat currency (either EUR or GBP)
    string offramp_daily_limit = 50;
    // current usage for off-ramp expressed in fiat currency (either EUR or GBP)
    string offramp_current_daily_usage = 60;
  }
}

message WhitelistAddressRequest {
  // user given name, could be same name as in the Self Custody wallet if supported by wallet vendor
  // (the maximum length of the name is 100 symbols)
  string name = 10;
  // Ethereum, Avalanche, Terra and etc.
  Protocol protocol = 20;
  // address in particular blockchain e.g. 0x31792BB64B2fA8e0a4F5fD8F82DDf81A6F2C30e0
  // Deprecated in favour of signed_address
  string address = 30 [deprecated=true]; // limited to 255 characters
  // address must be derived from the provided public key
  // public key in particular ecosystem, encoded accordingly to ecosystem rules (Ethereum - hex, Cosmos - base64)
  // Deprecated in favour of signed_address
  string public_key = 35 [deprecated=true]; // limited to 255 characters
  // the address should be signed with its private key
  // for the Ethereum: the address should be signed with https://docs.metamask.io/wallet/reference/personal_sign/
  // Deprecated in favour of signed_address
  string address_signature = 40  [deprecated=true];

  // this field is only required when the public key used to authenticate this request is different from the key used to derive the address
  // if this field is present in the request it takes precedence over the address, public_key and address_signature of the WhitelistAddressRequest
  SignedAddress signed_address = 50;

  message SignedAddress {
    // address in particular blockchain e.g. 0x31792BB64B2fA8e0a4F5fD8F82DDf81A6F2C30e0
    string address = 30; // limited to 255 characters
    // address must be derived from the provided public key
    // public key in particular ecosystem, encoded accordingly to ecosystem rules (Ethereum - hex, Cosmos - base64)
    string public_key = 35; // limited to 255 characters
    // the address should be signed with its private key
    // for the Ethereum: the address should be signed with https://docs.metamask.io/wallet/reference/personal_sign/
    string address_signature = 40;
  }
}

message WhitelistAddressResponse {}

message RemoveAddressRequest {
  Protocol protocol = 10;
  // address in particular blockchain e.g. 0x31792BB64B2fA8e0a4F5fD8F82DDf81A6F2C30e0
  string address = 30;
}

message RemoveAddressResponse {}

message SetBankAccountRequest {
  // first and last beneficiary name is not required. KYC info will be used as beneficiary name
  oneof bank_account {
    ScanCoordinates scan = 10; // only for scheme SCAN
    IbanCoordinates iban = 20; // for both SEPA and SWIFT schemes
  }
}

// The client should comply to basic validation rules such as min/max length for ibans, sort codes and account numbers
// complex validation such as IBAN or SCAN checksums and sort code directory is performed by Harbour
message SetBankAccountResponse {
  repeated Error errors = 10;

  enum Error {
    ERROR_UNSPECIFIED = 0;

    // Returned when the routing code is wrong (eg: sort code for UK and BIC for ibans).
    // Note: the client still needs to perform basic validation, such as guaranteeing that the sort code is exactly 6 digits,
    // else it won't even get this response and just get a code invalid argument.
    // However, the backend will perform more advanced validation, such as checking that the sort code exists, in which
    // case it will return this error.
    ERROR_BANK_CODE_INVALID = 1;

    // Same as above, but for the account number (eg: account number for UK and IBAN for ibans).
    // In case of UK account numbers, the account number is validated against the sort code, to determine whether it's
    // valid according to the destination bank.
    // In case of IBAN, basic mathematical checks will be performed, according to the IBAN standard, to verify its validity.
    ERROR_BANK_NUMBER_INVALID = 2;

    // Returned when the user tries to set the bank account same as the magic-ramp account.
    ERROR_SAME_BANK_ACCOUNT = 3;
  }
}

message EstimateOnRampFeeRequest {
  // All fields are mandatory
  CurrencyId fiat_asset_id = 5;
  AssetId crypto_asset_id = 10;
  Protocol protocol = 15;
  oneof amount {
    string fiat_asset_amount = 20;
  }

  oneof referral { // this is optional and could be used by partners of Harbour
    string code = 30; // please reach out support to obtain referral code
    string wallet_address = 40; // provide wallet_address if referral transaction was registered for this address
  }
}

message EstimateOnRampFeeResponse {
  string fiat_asset_amount = 20; // denominated in user's fiat currency
  string crypto_asset_amount = 30; // denominated in crypto_asset
  string exchange_rate = 40;
  string network_fee_amount = 50; // denominated in user's fiat currency
  string processing_fee_amount = 60; // denominated in user's fiat currency
  string referral_fee_amount = 70; // denominated in user's fiat currency
}

message EstimateOffRampFeeRequest {
  CurrencyId fiat_asset_id = 5; // optional - just for a transitional period
  AssetId crypto_asset_id = 10;
  Protocol protocol = 15;
  oneof amount {
    string crypto_asset_amount = 20;
  }

  oneof referral { // this is optional and could be used by partners of Harbour
    string code = 30; // please reach out support to obtain referral code
    string wallet_address = 40; // provide wallet_address if referral transaction was registered for this address
  }
}

message EstimateOffRampFeeResponse {
  string fiat_asset_amount = 20; // denominated in user's fiat currency
  string crypto_asset_amount = 30; // denominated in crypto_asset
  string exchange_rate = 40;
  string processing_fee_amount = 60; // denominated in user's fiat currency
  string referral_fee_amount = 70;
}


message GetRampsRequest {
  optional Page page = 10; // if not set default page will be used (index=0, size=10)
  RampType ramp_type = 20; // required
  optional DateRange date_range = 30; // optional

  message DateRange {
    google.protobuf.Timestamp from = 10;
    google.protobuf.Timestamp to = 20;
  }
}

message GetRampsResponse {
  PagedResult page = 10;
  repeated Ramp ramps = 20;

  message Ramp {
    string id = 10;
    RampType type= 20;
    AssetId crypto_asset = 30; // could be empty if ramp is not completed yet
    string fiat_amount = 40; // could be empty if ramp is not completed yet
    string crypto_amount = 50; // could be empty if ramp is not completed yet
    //string exchange_rate = 60; // could be empty if ramp is not completed yet
    Protocol wallet_protocol = 70;
    string wallet_address = 80;
    string network_fee_amount = 90; // in fiat, could be empty if ramp is not completed yet
    string processing_fee_amount = 100; // in fiat, could be empty if ramp is not completed yet

    google.protobuf.Timestamp finalized_at = 110; // could be empty if ramp is not completed yet
    google.protobuf.Timestamp initiated_at = 120;
  }
}

message GetAssetsRequest {
  CurrencyId fiat_asset_id = 10;
}

message GetAssetsResponse {
  repeated CryptoAsset crypto_assets = 10;

}

message RegisterReferralTransactionRequest {
  string referral_code = 10; // assigned to the partner by Harbour
  string wallet_address = 20;
  RampType type = 30;
  CurrencyId currency = 40;
  AssetId crypto_asset = 50;
  Protocol crypto_asset_protocol = 60;
  string referral_transaction_id = 70; // client generated id of transaction, will be reported back in the webhook
  string amount = 80; // fiat amount for on ramps, crypto amount for off ramps
}

message RegisterReferralTransactionResponse {

}

message CryptoAsset {
  // asset status for on/off ramping
  RampStatus status = 10;

  Protocol protocol = 20;
  Network network = 30;
  AssetId asset_id = 40; // the client can use this to match an asset with precision and display custom wording / icon, e.g. "USDC"
  string short_name = 50; // to be used as a fallback if the client doesn't recognise the asset_id (eg: out of date proto definitions)
  string symbol = 55; // the canonical symbol for the asset - eg: USDC for any Circle-issued USDC on any chain, or ETH for Ethereum

  oneof details {
    EthereumErc20Token ethereum_erc20_token = 60;
    CosmosIcs20Token cosmos_ics20_token = 70;
    SubstratePsp22Token substrate_psp22_token = 80;
    EthereumNative ethereum_native = 90;
  }

  Limits onramp_limits = 100;
  Limits offramp_limits = 110;


  message EthereumErc20Token {
    string token_address = 10; // ERC20 token address
  }
  message CosmosIcs20Token {
    string ibc_address = 10; // IBC token address
  }
  message SubstratePsp22Token {
    string token_address = 10; // Substrate PSP22 token address
  }
  message EthereumNative {}

  message RampStatus {
    Status onramp = 10;
    Status offramp = 20;

    enum Status {
      // All is good, asset can be on/off ramped
      STATUS_UNSPECIFIED = 0;
      // Our system is experiencing degradation (longer waits) but still operational.
      // The UI should warn users.
      STATUS_DEGRADED = 20;
      // Exceptional scenarios: ramping halted. The UI should prevent users from taking any action.
      STATUS_HALTED = 30;
    }
  }

  message Limits {
    Amount single_limit_amount = 10;
    Amount daily_limit_amount = 20;
    Amount daily_used_amount = 30;
    Amount daily_remaining_amount = 40;

    message Amount {
      string asset = 10;
      string fiat = 20;
    }
  }
}

message ScanCoordinates {
  string account_number = 10; // always 8 digits
  string sort_code = 20; // always 6 digits (if using an input mask such as ##-##-##, remove the dashes before submitting)
}

message IbanCoordinates {
  string iban = 10; // up to 34 characters (please submit them all uppercase) and numbers
}

// used in the webhook for partners (by default in the JSON format)
message RampTransaction {
  string transaction_id = 10;
  string referral_transaction_id = 20;
  RampType type= 30;
  RampStatus status= 40;
  CurrencyId currency = 50;
  AssetId crypto_asset_id = 60; // could be empty if ramp is not completed yet
  Protocol crypto_asset_protocol = 70;
  string fiat_amount = 80; // could be empty if ramp is not completed yet
  string crypto_amount = 90; // could be empty if ramp is not completed yet
  string exchange_rate = 100; // could be empty if ramp is not completed yet
  Fees fees = 110; // not set if ramp is not completed yet
  string wallet_address = 120;
  // The hash of the transaction related to this ramp. For on-ramp it's the transaction to the user's wallet at the end of the ramp
  // For off-ramp it's the transaction hash that initiated the off-ramp.
  // Could be empty for on-ramp if it's not completed yet (i.e. the funds were not sent to the user's wallet yet)
  string transaction_hash = 125;

  google.protobuf.Timestamp finalized_at = 130; // could be empty if ramp is not completed yet
  google.protobuf.Timestamp initiated_at = 140;

  message Fees {
    string processing = 10; // in fiat currency
    string network = 20; // in fiat currency
    string referral = 30; // in fiat currency
  }
}

message Page {
  optional uint64 index = 10; // zero based numbering
  optional uint64 size = 20; // max 100
}

message PagedResult {
  uint64 index = 10; // zero based numbering
  uint64 size = 20;
  bool has_more = 30; // true if next page is available
}

enum RampType {
  RAMP_TYPE_UNSPECIFIED = 0;
  RAMP_TYPE_ON_RAMP = 10;
  RAMP_TYPE_OFF_RAMP = 20;
}

enum RampStatus {
  RAMP_STATUS_UNSPECIFIED = 0;
  RAMP_STATUS_PENDING = 10;
  RAMP_STATUS_COMPLETED = 20;
}

enum Ecosystem {
  ECOSYSTEM_UNSPECIFIED = 0;
  ECOSYSTEM_ETHEREUM = 10; // any EVM compatible chain - addresses are expected to be the right-most 160 bits of the keccak256 hash of the public key
  ECOSYSTEM_COSMOS = 20; // any Cosmos ecosystem chain - addresses are expected to be compatible with the Cosmos SDK (such as 160 bit BECH32)
  ECOSYSTEM_SUBSTRATE = 30; // any Substrate ecosystem chain - addresses are expected to be compatible with Substrate (overal 256bit SS58)
  ECOSYSTEM_SOLANA = 40;
}

enum Protocol {
  PROTOCOL_UNSPECIFIED = 0;
  PROTOCOL_ETHEREUM = 10;
  PROTOCOL_AVAX = 20;
  PROTOCOL_TERRA = 30;
  PROTOCOL_POLYGON = 40;
  PROTOCOL_ALEPH_ZERO = 50 [deprecated = true];
  PROTOCOL_ALEPH_ZERO_L2 = 60;
  PROTOCOL_POLKADOT = 70;
  PROTOCOL_NOBLE = 80;
  PROTOCOL_ARBITRUM = 90;
  PROTOCOL_SOLANA = 100;
}

// An AssetId helps the client to identify an exact token and customise the UI.
// The AssetId is universal across all chains, in fact our responses always include the Network, and the AssetID.
// So ASSET_ID_USDC will always be the official Circle USDC on any chain, be that Ethereum, or Avalanche, or Polygon.
enum AssetId {
  ASSET_ID_UNSPECIFIED = 0;
  ASSET_ID_USDC = 10;
  ASSET_ID_AXL_USDC = 20;
  ASSET_ID_1USD = 30;
  ASSET_ID_ETH = 40;
  ASSET_ID_DOT = 50;
  ASSET_ID_USDE = 60;
}

enum CurrencyId {
  CURRENCY_ID_UNSPECIFIED = 0;
  CURRENCY_ID_EUR = 10;
  CURRENCY_ID_GBP = 20;
}

enum Network {
  NETWORK_UNSPECIFIED = 0;
  NETWORK_ETHEREUM_MAINNET = 10;
  NETWORK_ETHEREUM_SEPOLIA = 20;
  NETWORK_AVAX_FUJI = 30;
  NETWORK_AVAX_C_MAINNET = 40;
  NETWORK_TERRA2_MAINNET = 50;
  NETWORK_POLYGON_MAINNET = 60;
  NETWORK_POLYGON_AMOY = 70;
  NETWORK_ALEPH_ZERO_MAINNET = 80;
  NETWORK_ALEPH_ZERO_TESTNET = 90;
  NETWORK_ALEPH_ZERO_L2_MAINNET = 100;
  NETWORK_ALEPH_ZERO_L2_TESTNET = 110;
  NETWORK_POLKADOT_MAINNET = 120;
  NETWORK_POLKADOT_TESTNET = 130;
  NETWORK_NOBLE_MAINNET = 140;
  NETWORK_NOBLE_TESTNET = 150;
  NETWORK_ARBITRUM_MAINNET = 160;
  NETWORK_ARBITRUM_SEPOLIA = 170;
  NETWORK_SOLANA_MAINNET = 180;
  NETWORK_SOLANA_DEVNET = 190;
}
