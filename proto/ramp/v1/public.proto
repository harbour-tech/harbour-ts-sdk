syntax = "proto3";

import "google/protobuf/empty.proto";

package ramp.v1;

// signature_type is supplied with every request in the header
// public_key is supplied with every request in the header
// timestamp is supplied with every request in the header and timestamp is validated as (+-1 minute from now) and used as a salt
// signature is supplied with every request in the header as sing(request body + salt, private_key) and validated as verify(request body + salt, public_key)
service RampService {
  rpc GetAccountInfo (GetAccountInfoRequest) returns (GetAccountInfoResponse) {}

  rpc WhitelistAddress (WhitelistAddressRequest) returns (WhitelistAddressResponse) {}
  rpc RemoveAddress (RemoveAddressRequest) returns (RemoveAddressResponse) {}

  rpc SetBankAccount (SetBankAccountRequest) returns (SetBankAccountResponse) {}
}

message GetAccountInfoRequest {}

message GetAccountInfoResponse {
  oneof result {
    Authentication authentication = 20;
    Account account = 30;
  }

  message Authentication {
    string authentication_url = 10;
  }

  message Account {
    repeated Wallet wallets = 10;

    // A bank account created by Harbour in the name of the user, where funds can be sent
    oneof onramp_bank_account {
      ScanCoordinates onramp_scan = 100; // only for scheme SCAN (UK payments)
      IbanCoordinates onramp_iban = 110; // for both SEPA and SWIFT schemes
    }

    // A bank account set by the user for off-ramping, see rpc SetBankAccount
    oneof offramp_bank_account {
      ScanCoordinates offramp_scan = 200; // only for scheme SCAN (UK payments)
      IbanCoordinates offramp_iban = 210; // for both SEPA and SWIFT schemes
    }

    string account_holder = 20; // account holder name for on and off-ramping
  }

  message Wallet {
    Network network = 10;
    string address = 20;
    repeated RampAsset assets = 30;

    message RampAsset {
      Asset asset = 10;
      OnRamp on_ramp = 20;
      OffRamp off_ramp = 30;

      message Asset {
        string short_name = 10; //BTC, USDC etc.
        // TBD: smart contract address, long name...
      }
    }

    message OnRamp {
      string payment_reference = 10; // e.g. "ETH USDC 1" or ETU1
      float estimated_rate = 30; // can be slightly different as rate is taken at the moment funds hit Harbour wallet / bank account
      Fee estimated_network_fee = 40; // can be slightly different as rate is taken at the moment funds hit Harbour wallet / bank account
      Fee processing_fee = 50;
    }

    message OffRamp {
      string address = 10;
      float estimated_rate = 30; // can be slightly different as rate is taken at the moment funds hit Harbour wallet / bank account
      Fee estimated_network_fee = 40; // can be slightly different as rate is taken at the moment funds hit Harbour wallet / bank account
      Fee processing_fee = 50;
    }

    message Fee {
      string fix = 10; // denominated in the currency of bank account (EUR, GBP)
      string percent = 20;
    }
  }
}

message WhitelistAddressRequest {
  string name = 10;
  Network network = 20;
  string address = 30;
  // for the Ethereum: the address filed should be signed with https://docs.metamask.io/wallet/reference/personal_sign/ using
  // private key of this address
  string address_signature = 40;
}

message WhitelistAddressResponse {}

message RemoveAddressRequest {
  Network network = 20;
  string address = 30;
}

message RemoveAddressResponse {}

message SetBankAccountRequest {
  // first and last beneficiary name is not required. KYC info will be used as beneficiary name
  oneof bank_account {
    ScanCoordinates scan = 10; // only for scheme SCAN
    IbanCoordinates iban = 20; // for both SEPA and SWIFT schemes
  }
}

message SetBankAccountResponse {

}

message ScanCoordinates {
  string account_number = 10; // always 8 digits
  string sort_code = 20; // always 6 digits (if using an input mask such as ##-##-##, remove the dashes before submitting)
}

message IbanCoordinates {
  string iban = 10; // up to 34 characters (please submit them all uppercase) and numbers
}

enum Network {
  NETWORK_UNSPECIFIED = 0;
  NETWORK_ETHEREUM_MAINNET = 10;
  NETWORK_ETHEREUM_SEPOLIA = 11;
  NETWORK_AVALANCHE_MAINNET = 21;
  NETWORK_AVALANCHE_FUJI = 22;
}

enum SignatureType {
  SIGNATURE_TYPE_UNSPECIFIED = 0;
  SIGNATURE_TYPE_RSA = 1;
  SIGNATURE_TYPE_SECP256K1 = 2;
}