syntax = "proto3";

import "google/protobuf/timestamp.proto";

package card.v1;

service PingService {
  rpc Ping (PingRequest) returns (PingResponse) {}
}

message PingRequest {
}

message PingResponse {
  string message = 10;
}

service CardService {
  rpc GetCards(GetCardsRequest) returns (GetCardsResponse) {}
  rpc CreateVirtualCard(CreateVirtualCardRequest) returns (CreateVirtualCardResponse) {}
  rpc BlockCard(BlockCardRequest) returns (BlockCardResponse) {}
  rpc UnblockCard(UnblockCardRequest) returns (UnblockCardResponse) {}
  rpc GetSecureToken(GetSecureTokenRequest) returns (GetSecureTokenResponse) {}
  rpc SwitchCardSource(SwitchCardSourceRequest) returns (SwitchCardSourceResponse) {}
}

// Only enabled in non-prod environments.
service CardDevService {
  rpc GetCardExternalID(GetCardExternalIDRequest) returns (GetCardExternalIDResponse) {}
}

message GetSecureTokenRequest {
  string card_id = 10;
  string user_id = 20;
}

message GetSecureTokenResponse {
  oneof result {
    Error error = 10;
    TokenInfo token_info = 20;
  }
  message TokenInfo {
    // Encrypted token, needs to be decrypted with RSA OAP, empty label, with the device's private key
    // Then it can be used as an Authorization Bearer token here:
    // https://modulr.readme.io/reference/getsecurecarddetails
    string secure_token = 10;
  }
  // note: this RPC should not be invoked on expired or blocked cards, else an error is returned
  enum Error {
    ERROR_UNSPECIFIED = 0;
    ERROR_CARD_IS_BLOCKED = 10;
    ERROR_CARD_IS_EXPIRED = 20;
  }
}

message GetCardsRequest {
  string user_id = 10;
}

message GetCardsResponse {
  repeated Card cards = 10; // only one for now
}

message CreateVirtualCardRequest {
  string user_id = 10;

  // As part of 3D-secure authentication, the user will have to respond to a security question, in addition to an OTP.
  // At least one element is required, and no more than 3 are allowed. Duplicate types will be ignored.
  repeated KBA authentication_answers = 20;
}

message CreateVirtualCardResponse {
  // There are no scenarios in which the request can fail, apart from client errors
  // (such as a missing field - for which a code Invalid Argument is returned)
  Card card = 10;
}

message BlockCardRequest {
  // Required, the card id to block.
  string card_id = 10;
  string user_id = 20;
}

message BlockCardResponse {
  // the card id that was blocked.
  string card_id = 10;
}

message UnblockCardRequest {
  // Required, the card id to unblock.
  string card_id = 10;
  string user_id = 20;
}

message UnblockCardResponse {
  // the card id that was unblocked.
  string card_id = 10;
}

message SwitchCardSourceRequest {
  // the card should be in active status and should not be expired. If not, an error is returned.
  string card_id = 10;
  string user_id = 20;
  SourceOfFunds switch_to = 30;
}

message SwitchCardSourceResponse {
  // the card id that was switched.
  string card_id = 10;
  SourceOfFunds result = 20;
}

message Card {
  string id = 10;
  string user_id = 20;
  CardType card_type = 30;
  string masked_card_number = 40; // 16 digits, with asterisks for the hidden ones

  // ISO 8601 date (yyyy-MM) when the card expires. Eg: 2024-12.
  // The month is intended to be inclusive. Eg: 2024-12 means the card is valid until 2024-12-31 23:59:59.
  // Although the exact time of expiry is unknown as our provider does not specify the expiry timezone.
  // Supposedly either UTC or British time.
  string expiry = 60;

  CardStatus status = 70;

  SourceOfFunds source_of_funds = 80;

  google.protobuf.Timestamp created_at = 100;
}

message SourceOfFunds {
  string asset_id = 10;
  Type type = 20;
  string account_id = 30;

  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_FIAT = 1;
    TYPE_CRYPTO = 2;
  }
}

enum CardType {
  CARD_TYPE_UNSPECIFIED = 0;
  CARD_TYPE_VIRTUAL = 1;
  CARD_TYPE_PHYSICAL = 2;
}

enum CardStatus {
  CARD_STATUS_UNSPECIFIED = 0;
  CARD_STATUS_PENDING_ACTIVATION = 10; // not relevant until we get physical cards, which need to be activated
  CARD_STATUS_ACTIVE = 20;
  CARD_STATUS_BLOCKED = 30;
}

// Knowledge-based answer
message KBA {
  KBAType answer_type = 1;
  string answer = 2; // max 45 characters
}

enum KBAType {
  KBA_TYPE_UNSPECIFIED = 0;
  KBA_TYPE_MAIDEN_NAME = 1;
  KBA_TYPE_CHILDHOOD_FRIEND = 2;
  KBA_TYPE_FIRST_CAR = 3;
  KBA_TYPE_CITY_WHERE_PARENTS_MET = 4;
}


message GetCardExternalIDRequest {
  string card_id = 10;
  string user_id = 20;
}

message GetCardExternalIDResponse {
  string external_id = 10;
}